<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>XWiki</web>
<name>SkinEditor</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1234634502000</creationDate>
<date>1235835686000</date>
<contentUpdateDate>1235835686000</contentUpdateDate>
<version>4.1</version>
<title>XWiki Skin Editor</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<attachment>
<filename>bespin.js</filename>
<filesize>308518</filesize>
<author>XWiki.Admin</author>
<date>1235337053000</date>
<version>1.7</version>
<comment></comment>
<content></content>
</attachment>
<attachment>
<filename>icnfontsize.png</filename>
<filesize>1120</filesize>
<author>XWiki.Admin</author>
<date>1235337053000</date>
<version>1.2</version>
<comment></comment>
<content>iVBORw0KGgoAAAANSUhEUgAAACIAAAAUCAYAAADoZO9yAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABAJJREFUeNrMVl1IlFkY9hunsnTaaqLBorCUcCzRhH4gI4MK+3Fx3ail2m22aJMFoYsugugiYfAqXGHTkAIlULIkTc3Mi23xRtCLTJS1UZD8mdT1Z5oZR8cZp+eh98TXkHUhhAcezvee9z3veX/P+bRQKBSxFIb2HfQbBPym10GZP4uAcTGnfCuamqZFYooCont7ey+YzeZNMzMzL2JjY59jbxD8RXtJB1bIIcsBHqjRMAWRiwa2ZGRkHA7JmJ2d7ZB9i87GMmA1sNHpdBb7fL5/MZ+gMWGG0NgNwO7Kysp7Id1oa2vLkHR91dtI8XKFHGoI48cAW9PT0zOVYo/H85TyYYasBLYBx4aHh99Srrm5uYnzyMjIHdG94KAXJsAyODhoRz5fdnZ2WnVhjBQv91RUVNynUr/f7+ZcVFS0RaVHjF8DpGRnZ+eRD32DCQkJ1/kdCARckjZtoWisYk4Zzrm5uffcNDY2dktnvfIyE8XXQ35NTc1jzv39/dfoiBhC+Y3AgZaWlqfkV1dXPwF9ZWBg4DXpjo6On8WxiIiwsBukiNYVFBScMBqNpqmpKYfJZPpJlyKmKyYnJ2dbfHz8dhjjKC4ufsXNFovlAuW0j62wXFJoSklJ2Us+IvgCk7u2tvYl6bi4uN8X6loeshk42N3d3QYjxkpLS2/T+tbW1kPCp5f7GxsbK7heVlb2APSloaGhV6QbGhpSRbmZUc3Pz7dLWtgpmcDpxMTEvPB0hqeFtWFNS0s7rQorKSnpiq64fgC2A8ddLtco161W6580pL6+/iHp0dHRv1XLAkfhQIsqaLfb/Y77Jicn/1drKp16Q1QR7i0pKfmLQk1NTc30GB3hRO+/lWjtzs3NvRlaYIicBdiRnJxsQ2tPc53RpRGcJyYmxtU65k6pu0+DtREHHIaVXV86pKqq6g/wjygv2ZJ9fX3/ORyONwSM8HC9rq6Oud+PsN8hTRnQ55kWwAZcRX3dUPKSToNKCy+oHampqWfJREE9An2RYQd+ZU57enrq8X0KLe0l8P0b8IvI5BUWFt7lXhjFO+Wkcqi8vLwA9D4gDUgHcoDL7e3t/+jSuUx1yzpgJ7wpItNms51l6zHPwI9dXV2NNMZut+eTj2J+Jsp3sbiBbOAMZQg4dI4e8zsrK2ufpH2NFDv3ZFGX1+sdhlOv2QjqJmVE1ouwn20GzEkLrpbUqVfUB0wI/CJjlr0GeV1ZgAFgHHACLlln560FYqU5vMIf13T3x0rpfyqflo1RcslF6e6cGVEwLYepOyNa1wGa8CjnAWbl2VevcYwYFRSnfZrufYnUeUTMi2LFU/0elEMCotwgcsawC3JeJzcf9n+i9IaEH9SWyh+aIWKJjA8CDAB1IbdTlOlFiQAAAABJRU5ErkJggg==</content>
</attachment>
<attachment>
<filename>script.gif</filename>
<filesize>1071</filesize>
<author>XWiki.Admin</author>
<date>1235823650000</date>
<version>1.1</version>
<comment></comment>
<content>R0lGODlhEAAQAPfEAPf7/sTd+cHd+v3+/8Pd+r/c+Pv9//r8/8Db+cHc+cDd+b/c+tHj+vT5/U9zoFeO02md4sri+qbL6aXK64CdwdPf7jVekrzb+VmFtLza+X+96NTn+0+Lv93t+e/y9pSqxuTx/YWkx/H2/kBuocLd+vn7/4G86v3+/nyewne36Nvo+miu4P3//8Dc+JWvznG15UuFuVeUyIau5KO61vD2/Pn8/sjh+/z9/qa50Mzk+sXe+bXV+dnr+HCg4GyKsMLe+FmP1NPm+73c+W+e2NLl+uLq9cLd+dDi8dDj+1qPy5/I5+bv+22y5r3a+Gmr3djp/L/b+FeJub/b+rvM3vT4+8Db+ICx2F+CrcHd+ZbI7OLw/VBzoV1+qMng+3Gd0nul2Ye437LQ7erz+8Tf897r/ff6/fb6/cbh+tvq/fX5/MPU59Dl+sDb+jlhldXp+4zA6oO/6PH3/sPd+eTw/ISiw12S1n2852ix5Iyu1WiSvPn7/PP3+090o3aav/D0+Fuazd/t/eLt9crh+sLb+dXe6PH4/VONweHp8t/r+7PG37ra8eHt+9jr/ZrG61KGuaK72GOW2Ky+07rO4mqb16LH98Da+UqEuMzj+8Da9KrQ7Oz1/cPc+vD2/8Hb+tjn9ZK+4Wiw5Nvq/O/0+3uWuGiezcfg+uLv/OXw/VaGt83c7EFpmsbf9a3P922QuMLc+c3i+pGrx5OsyIrC6vz+/+nv9tDn9sHZ8Gak1UFomb/c+dXp/e71/cLe+sff+evx/dPm+MHZ7svi++fw/f///////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAMQALAAAAAAQABAAAAj/AIkR6wDHRAomoO68sKNBVpZaNwQqejOs4rAGYnj8WiVhxRiBmRoNMyXM165CZQ4MA4DJiUAlEwzoYoQGkBYQc4b1KAFG4KcwnARdQhLEzZNQLLwAuyXQiq1FlVzpKBXh1ZoBSf4cEUjKE5EMF6QIEBDAhoEYewQS40Cjl5AFnQiQCNDlgCEqAvXAAJCgQIEqChTICZbGklpajmrkgtJiUAIjBDYEiqL2EKoTvBYgQICFzSYyqfII9IMCzylKrHY0+XEmhyZJfQROGYHhy5BJkOoAeQCBwSM6AmOFsDhsFoA4ImSocAFLYKRWMxKpqVBElJkBiJZQwCHQw4dRPrg4DMBloY0qPle2EBIYEAA7</content>
</attachment>
<attachment>
<filename>bullettoggleplus.gif</filename>
<filesize>186</filesize>
<author>XWiki.Admin</author>
<date>1235823655000</date>
<version>1.1</version>
<comment></comment>
<content>R0lGODlhEAAQAMQYAK2trX9/f7S0tJqamnR0dLq6uoeHh729vampqdPT06+vr4SEhHZ2dp2dnaOjo5CQkHl5eaysrLu7u7Ozs4qKir+/v8LCwv///////wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAABgALAAAAAAQABAAAAU3ICaOZGmeaKquYlIVgoJI6WHd95AKFnABlkcqYrkYLYaUo/ezBFID3I2RmlAWAQihwep6v+BvCAA7</content>
</attachment>
<attachment>
<filename>scriptedit.gif</filename>
<filesize>1077</filesize>
<author>XWiki.Admin</author>
<date>1235824814000</date>
<version>1.1</version>
<comment></comment>
<content>R0lGODlhEAAQAPfTAPf7/v33x7/c+sHd+r/c+PfiW/fhWsrh+vDStMHc+f3//+TJVcDa+czj+9Xp/dvq/Mff+YzA6tSia/3+/pSqxorC6qbL6Wieze7TeeTw/ISiw8Hb+vD2/OXw/fn7/JuBVvn7/9Xe6Pz9/oWkx8/QrWyKsNuZS4RnLk+Lv/32xP/y4EuFucrSvZWvzsLe+tKYSr56GvnJkfXfW9XUudjn9b3c+env9r/b+tjr/bLQ7cDc+NDn9oG86vT5/Wmr3eLv/MaOSdCdRu71/Wak1cXe+cDb+Pbq3NDj+6a50K5rJ8Pd+rvM3s3i+oe438nOu/D0+NLY4NPm+J/I583QslKGuZbI7KqJQ8fg+uHp8r2+rdG3kOHt+090o+/SrFBzofH4/ZOnxsmFQefLd8HZ8HCg4H2857C2r+/y9tilWHyewnG15bzb+dvq/cri+r/c+fr8/9yYSvLWelVAFvXcX9CVT9W5dvXcXu3QeN/r+22y5kFpmoZgKt3t+fnHlNLl+vDTeVaGt//z5buHSnul2Ulkh+7Ufffv5b/b+F+CrWiu4NPm+5OsyPzgxOe+d8HZ7sWYScLc+fffY5rG6/D2/4CJj+fAi6LH96XK64Cdwefw/fnjssbf9Wix5He36KK72Ky+03+96O3VgWiw5N/t/b7GzZGrx9nr+ICx2IO/6PjiXdiaVLza+evx/dvo+vbdbNjp/JK+4arQ7Pf6/eLw/dDGqHaav0BuofbTrvHUe/n8/tXp+8Tf86O61uTx/dW2eu3KbbPG336RodejY1mFtHGd0urz+9uxhfv9/8yWWW2QuIyu1XuWuNWiabra8f32wsDa9PDl2Obv+////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAANMALAAAAAAQABAAAAj/AKdN44OKR6c8ojipKQOqQpUdIgQ2iyCtorQexUxF2WQh0S6BsSRJ+5GJlZAvst5IA/DMh0Apl445wMFm1KxeGaSRAdFEIKwckw40OKJI16sHCog5GiLw1JgtDCARudKGyQw0xoLQEniBhp9Va24MGECiEYJAXZAJRMEBQg0BG5RMCaWp0i1GEqZ5WAEgAQECRVgUSuHqlzBmhqbZoJLLzSEdTjAEmFMgzgsjArEAmuBCQBYxAewYwGUimMAnaZR1sGSmjrNIqf7AIVVL4BJbwwZR8qVlgYw7dKB40iBw0YiKVlSogvEICJhWLUoJ/JSMF7ATfWKESQINTzRMSASeEqGwrIScPYI+ENLDBZGXEAIDAgA7</content>
</attachment>
<attachment>
<filename>zoom.gif</filename>
<filesize>608</filesize>
<author>XWiki.Admin</author>
<date>1235824818000</date>
<version>1.1</version>
<comment></comment>
<content>R0lGODlhEAAQAOZ1AOz0+u/1+/Tr4u30+vn7/ezz+uny+vTs3PD2++ny+e71+/f6/fr8/ujx+dSwcPbv5L6HTfP4/PL3/OLLud/Fj+fTuuHJuMOSW82mYtKuhMSUWMGOWNGrg93CkfHl2L5zQPHm2KxlP9a1f5dhRsWVa8uplPz5986nY/Ln2cGPWsiaYPfx7fn08dy/pd/Ep9m7jNq7gN/Fo6VcM/Po2vH2+8yhZ/H3/NKubePNu9e2fdCoasORVt3DkdKtbM+pZb2FTM2naNi5i7yEUeTMrPn7/vjy7+jVo7mASObRuezcv9u/h7uFT+nXpfv39b+LUPT4/OXPqeDHk7FyRb6JVdKtd9Krb8mbY9e3febRruTOrN7Eo7NzS7uBTOfToNGqdsGNU+DHtubRr8qgb/jx7ePMmfz6+da0ed7Ejffv5c2kcffw5cmbYd7DpryDT9y+pMqfZc+oY7uGUte1fery+uvz+v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAHUALAAAAAAQABAAAAe9gHV1Bzw3Pic6LzOCjIJJDldhag9ZVDUVjYMOUAsBc3Q0BDFWII0dOQt0DQkGcwoEaRmNPVgIq610dBIuF41waHStn3QFCgJOjRgPBXPDBQABAhCNQEM2uXQAAAMRLVONQV4EAdoDAwgMSySNKG9aRBEBAU8MGlUfOI1IKmJsAgJuvpghc6bNmEYeOKSA8CMOFyVGmMAIsSJTowkbKHSJsmaECYuMLAiRI2KHlCYgGYGRcWRLkZSNWJQoIygQADs=</content>
</attachment>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>onDemand=On demand|always=Always</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.SkinEditor</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<property>
<cache>default</cache>
</property>
<property>
<code>(function(){

var previousSelected;

document.observe("dom:loaded", function(){
    var skinFiles = $$("ul[class='xlist'] li[class*='skinfile']");
    for(var i=0; i&lt;skinFiles.length;i++) {
      if (skinFiles[i].hasClassName("selected")){ 
          previousSelected = skinFiles[i];
      }
      if (skinFiles[i].down('span.xshowcode')) {
         Event.observe(skinFiles[i].down('span.xshowcode'), "click", function(e){
           previousSelected.removeClassName("selected");
           e.element().up('li.xitem').addClassName("selected");
           previousSelected = e.element().up('li.xitem');
           var code = e.element().up('li.xitem').down('div.code pre').innerHTML;
           var filename = e.element().up('li.xitem').down('div.filename').innerHTML;
           $('codecontainercontent').down('pre').innerHTML = code;
           $('codecontainerfile').innerHTML = filename;
         }.bind(this));
      }
    }
});

})();</code>
</property>
<property>
<name>Skin Editor</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>onDemand=On demand|always=Always</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.SkinEditor</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<property>
<cache>default</cache>
</property>
<property>
<code>#if(!$xwiki.jsfx) ## PRE 1.8M2 -- add missing styles (are not yet in toucan.css)
.xspacer {
  clear:both !important;
  height: 0 !important;
  width: 0 !important;
  line-height: 0 !important;
  padding: 0 !important;
  margin: 0 !important;
}

/* 
** Wiki items lists (spaces, pages, comments, attachments)
*/

ul.xlist {
  margin: 0 0 0 0.5em !important;
  padding: 0 !important;
}

ul.xlist li.xunderline {
  border-bottom: solid 1px #efefef !important;
}

ul.xlist li.xhighlight:hover {
  background-color: lemonChiffon;
}

ul.xlist li {
  width: 100% !important;
  padding-top: 0.2em;
  list-style-type: none;
}

ul.xlist li.space, ul.xlist li.page, ul.xlist li.comment, ul.xlist li.attachment {
  background-repeat: no-repeat;
  background-position: 2px 3px;
}

ul.xlist li.xitem div.xitemcontainer {
  text-indent: 1.5em;
}

ul.xlist li.xitem div.xitemcontainer ul.xlist {
  text-indent: 0em;
}

#xwikimaincontainerinner .code {
  background-color:#F1F7FF;
  border:1px dotted #555555;
}
#end

#xwikicontent #header {
  background: #000000 url($xwiki.getDocument("XWiki.SkinEditorExtension").getAttachmentURL("SKElogo.jpg")) no-repeat scroll 0 0;
  min-height:50px;
}

ul.xlist li.skinfile span.xshowcode {cursor:pointer;}
ul.xlist li.skinfile div.xmore {
  background-image: url($doc.getAttachmentURL("bullettoggleplus.gif"));
  background-position:2px 3px;
  background-repeat:no-repeat;
  float:right;
  font-size:0.8em;
  padding:0 0.5em 0 0;
}
ul.xlist li.skinfile {
  background-image:url($doc.getAttachmentURL("script.gif"));
  background-position:2px 3px;
  background-repeat:no-repeat;
}
/*ul.xlist li.skinfile div.actions {line-height:0;}
*/
ul.xlist li.selected {background-color:#F1F7FF;}
ul.xlist li.skinfile div.actions a {
  background-image: url($doc.getAttachmentURL("scriptedit.gif"));
  background-repeat: no-repeat;
  background-position:0px -4px;
  padding-left:20px;
} 
ul.xlist li.skinfile div.actions span.xshowcode a {
  background-image: url($doc.getAttachmentURL("zoom.gif"));
  background-repeat: no-repeat;
  background-position:3px -2px;
  padding-left:20px;
} 
/* 
** Hidden elements in lists that are show on hover 
*/
ul.xlist li.xitem div.xshowonhover {
  float: right;
  font-size: 0.8em;
  padding: 0;
  padding-right: 0.5em;
  display: none;
}
ul.xlist li.xitem:hover div.xshowonhover {  display:block;}
/* IE6 hack, see JSX */
ul.xlist li.over div.xshowonhover {display:block;}
</code></property><property><name>Skin Editor</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>XWiki.SkinEditor</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>##
## Skin Editor Application
## @programming (to access the engine context for storing pseudo-locks)
## 
## TODO
## - Relative paths for proto + xwiki.js (or check version)
##
##  = Global vars =
##
#set($openPRE = "{" + "pre}")     ## Trick XEclipse to keep syntax coloration inside pre
#set($closePRE = "{/" + "pre}")
#set($code = "{" + "code}")
#set($sc = $context.context.engineContext.servletContext)
#if($request.xpage &amp;&amp; $request.xpage=="plain")
  ##
  ## = Services =
  ##
  #if("$!request.filename" != "")
    ##
    ## @service serve skin or SX content. 
    ## Decode the passed filename to retrieve the proper content. (skin file or JSX/SSX)
    ##
    #set($filename = $request.filename)
    #if($filename.startsWith("XWiki.XWikiSkins_")) ## Ah! we have a skin!
      #set($prefix = "XWiki.XWikiSkins_0_")
      #set($filename = $filename.substring($prefix.length()))
      #set($content = $doc.getObject("XWiki.XWikiSkins").getProperty("$filename").value)
    #else ## Probably a SX
      #if($filename.startsWith("XWiki.StyleSheetExtension_"))  ## SSX
        #set($filename = $filename.replaceAll(".css$",""))    ## Stript the .css, we don't need it here
        #set($nb = $util.parseInt($filename.substring($mathtool.sub($filename.length(), 1)))) ## Miam :)
        #set($content = $doc.getObject("XWiki.StyleSheetExtension", $nb).getProperty("code").value)
      #elseif($filename.startsWith("XWiki.JavaScriptExtension_")) ## JSX 
        #set($filename = $filename.replaceAll(".js$",""))        ## Stript the .js, we don't need it here
        #set($nb = $util.parseInt($filename.substring($mathtool.sub($filename.length(), 1)))) ## Again, Miam :(
        #set($content = $doc.getObject("XWiki.JavaScriptExtension", $nb).getProperty("code").value)
      #end ## If not, you won't have content and that's it! 
    #end
    ##
    ## give the found content if any as ajax request response.
    ##
    #if("$!content" != "")
$openPRE
$content
$closePRE
    #else ## in case it's empty, so that we don't get template does not exists.
Empty file.
    #end
  #elseif("$!request.release" != "")
    ##
    ## @service release a pseudo-lock (when changing file or leaving the editor). 
    ##
    #set($docName = $request.release)
    #set($file = $request.file)
    #set($locks = $sc.getAttribute("pseudolocks")) 
    #if($locks.containsKey("${context.database}:${docName}_${file}"))
      $locks.remove("${context.database}:${docName}_${file}")
      OK
    #end
  #elseif("$!request.update" != "")
    ##
    ## @service update a pseudo-lock (when saving file). 
    ##
    #set($docName = $request.update)
    #set($file = $request.file)
    #set($locks = $sc.getAttribute("pseudolocks")) 
    #if($locks.containsKey("${context.database}:${docName}_${file}"))
        #set($data = $util.arrayList)
        #set($ok = $data.add($mathtool.add($xwiki.date.time, 1800000))) ## 30 minutes
        #set($ok = $data.add($context.user)) 
        #set($ok = $locks.put("${context.database}:${docName}_${file}", $data))   
      OK
    #end
  #elseif("$!request.service" == "files")
    ##
    ## @service 
    ## give the file list for a SX or a Skin document.
    ## Called by the editor to refresh list of files and locks. 
    ##
    #set($sDoc = $xwiki.getDocument("$!request.doc"))
    #if($sDoc.getObject('XWiki.XWikiSkins'))
      #skinFilesList($sc $sDoc, "$!request.file", false, false)
    #else
      #sxFilesList($sc $sDoc, "$!request.file", false, false)
    #end
  #elseif($xwiki.hasAccessLevel("edit"))
    ##
    ## = Main = (edit mode)
    ##
$openPRE
    #if("$request.type" != "") ## Available types: sx, skin
      #set($type=$request.type)
    #else
      #set($type="sx") ## default on SX
    #end
    #if($type == "skin")
      ##
      ## XWiki.XWikiSkins files edition.
      ##
      #if("$!request.file" != "") #set($file = $request.file) #else #set($file = "style.css") #end
      #set($skin = $doc.getObject('XWiki.XWikiSkins'))
      #set($content = $skin.getProperty("${file}").value)
      ## Compose pseudo filename that will be passed around in bespin
      #set($filename = "XWiki.XWikiSkins_0_${file}") 
    #elseif($type == "sx")
      ##
      ## XWiki.JavaScriptExtension and XWiki.StyleSheetExtension files edition.
      ##
      #if("$!request.ext" != "") #set($ext = $request.ext) #else #set($ext = "js") #end
      #if($ext == "js") 
        #set($className = "XWiki.JavaScriptExtension")
      #elseif($ext == "css")
        #set($className = "XWiki.StyleSheetExtension")
      #else    
        #error("Invalid SX extension $ext") #set($hasError = 1)
      #end
      #if(!$hasError) ## No need to go further
        #if("$!request.o" != "") #set($number = $util.parseInt($request.o)) #else #set($number = 0) #end
        #set($extObject = $doc.getObject("$className",$number))
        #if($extObject)
          #set($content = $extObject.getProperty("code").value)
          #set($filename = "${className}_${number}.${ext}")
          #set($file = "${number}.${ext}")
        #else
          #error("Cound not find object $className number $number")
        #end
      #end
    #else
      #error("Invalid type: $type") #set($hasError = 1)
    #end
    #set($sc = $context.context.engineContext.servletContext)
    #if($hasError)
      #error("Error")
    #else
      ##
      ## Check pseudo-locks
      ##
      #if(!$sc.getAttribute("pseudolocks")) ## Lazy lock map creation in memory
        #set($ok = $sc.setAttribute("pseudolocks", $util.hashMap))
      #end
      #set($locks = $sc.getAttribute("pseudolocks"))
      #if($locks.containsKey("${context.database}:${doc.fullName}_${filename}"))
        #set($lockData = $locks.get("${context.database}:${doc.fullName}_${filename}"))
        #set($lockedUntil = $listtool.get($lockData, 0))
        #if($lockedUntil &lt; $xwiki.date.time)
          ## Lock is timed-out, let's remove it
          #set($ok = $locks.remove("${context.database}:${doc.fullName}_${filename}"))
        #else
          #set($locker = $listtool.get($lockData, 1))
          #if($locker != "$context.user") ## The locker is different from the context user
            #if($request.force &amp;&amp; $request.force=="1")
              #set($ok = $locks.remove("${context.database}:${doc.fullName}_${filename}")) ## Forced, let's remove the old lock
            #else
              #set($isLocked=1)
            #end
          #end
        #end
      #end
      #includeMacros("XWiki.SkinEditorMacros")
      #if(!$isLocked) ## if it's free, put our own lock here
        #set($data = $util.arrayList)
        #set($ok = $data.add($mathtool.add($xwiki.date.time, 1800000))) ## 30 minutes
        #set($ok = $data.add($context.user)) 
        #set($ok = $locks.put("${context.database}:${doc.fullName}_${filename}", $data))   
      #end
#template("xwikivars.vm")
&lt;html&gt;
  &lt;head&gt;
    &lt;meta name="document" content="$doc.fullName"/&gt; ## Useful metas for the JS code
    &lt;meta name="filename" content="$filename"/&gt;
    &lt;meta name="file" content="$file"/&gt;
#template("stylesheets.vm")  ## couple of includes. TODO: replace and include just what is necessary
    ## Bootstrap bespin.
    #if($xwiki.jsfx) ## POST 1.8 M2
      &lt;script type="text/javascript" src="$xwiki.getSkinFile("js/prototype/prototype.js")"&gt;&lt;/script&gt;
      &lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/xwiki.js", true)"&gt;&lt;/script&gt;
    #else ## compatibility with older versions
      &lt;script type="text/javascript" src="${request.contextPath}/prototype.js"&gt;&lt;/script&gt;
      &lt;script type="text/javascript" src="$xwiki.getSkinFile("xwiki.js")"&gt;&lt;/script&gt;
    #end
    #if(!$isLocked)
    &lt;script src=$xwiki.getDocument('XWiki.SkinEditor').getAttachmentURL('bespin.js')&gt;&lt;/script&gt;
    #end
    ## Hook for inserting JavaScript skin extensions
    &lt;!-- com.xpn.xwiki.plugin.skinx.JsSkinExtensionPlugin --&gt;
    &lt;!-- com.xpn.xwiki.plugin.skinx.JsSkinFileExtensionPlugin --&gt;
        #set($ok = $xwiki.ssx.use('XWiki.SkinEditorExtension'))
  &lt;/head&gt;
        #set($sxParams = $util.hashMap)
        #if(!$isLocked)
          #set($void = $xwiki.jsx.use("XWiki.BespinXWikiAdapter"))
          #set($void = $xwiki.jsx.use("XWiki.SkinEditorExtension"))
        #end
        ##
        ## Some elements bespin code relies they are in the DOM. 
        ## Hide the things we don't want (collab, buttons, etc.) and add our stuff
        ##
  &lt;body id=body&gt;
    &lt;div id="header"&gt;
      &lt;div id="collab_line" style="display:none"&gt;&lt;/div&gt;
      &lt;div id="version" style="display:none"&gt;&lt;/div&gt;
      &lt;span id="selected_browsers" style="display:none"&gt;&lt;/span&gt;
      &lt;span id="themes"&gt;
        #set($theme = $xwiki.getUserPreferenceFromCookie("skineditortheme"))
        #if("$!theme" == "") #set($theme = "coffee") #end
        &lt;select id="skineditortheme"&gt;
          &lt;option value="coffee" #if($theme=="coffee")selected#end&gt;Coffee&lt;/option&gt;
          &lt;option value="white"#if($theme=="white")selected#end&gt;White&lt;/option&gt;
          &lt;option value="black"#if($theme=="black")selected#end&gt;Black&lt;/option&gt;
        &lt;/select&gt;
        #set($zebra = $xwiki.getUserPreferenceFromCookie("skineditorzebra"))
        #if("$!zebra" == "") #set($zebra = "0") #end
        Zebra &lt;input type="checkbox" id="skineditorzebra" #if($zebra != "0")checked#end/&gt;
      &lt;/span&gt;
    &lt;/div&gt;
    &lt;div id="subheader" style="right:220px;"&gt; ## Do not remove the style, bespin relies on it.
      &lt;div id="xwikiextra" class="coffee"&gt;
        &lt;span class="buttonwrapper"&gt;&lt;button id="bespinsave"&gt;Save&lt;/button&gt;&lt;/span&gt;
        &lt;span class="buttonwrapper"&gt;&lt;button id="backtoxwiki"&gt;Back to the wiki&lt;/button&gt;&lt;/span&gt;
        &lt;img id="fontsize" title="Font Size" alt="Font Size" src="$xwiki.getDocument('XWiki.SkinEditor').getAttachmentURL('icnfontsize.png')"/&gt;
        &lt;span id="info" class="infomessage" style="display:none"&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div id="status" style="display:none"&gt;&lt;canvas id="projectLabel"&gt;&lt;/canvas&gt;&lt;/div&gt;
    &lt;/div&gt;
    #if($isLocked)
    &lt;div id="lockmessage"&gt;
      #set($forceLink = "${doc.getURL('view')}?${request.queryString}&amp;force=1")
      #warning("Locked by $xwiki.getUserName($locker, false). &lt;a href=${forceLink}&gt;Click this link to force edition.&lt;/a&gt;")
    &lt;/div&gt;
    #else
    &lt;div id="editor" width="1200" height="500"&gt;&lt;/div&gt;
    #end
    &lt;div id="files" class="coffee"&gt;
      ## Look in user cookie to see wheter or not to hide empty files when firing the editor.
        #set($hideemptyfiles = $xwiki.getUserPreferenceFromCookie("skineditorhideemptyfiles"))
      &lt;div id="filesheader"&gt;Files &lt;span&gt;hide empty&lt;input type="checkbox" id="skinfileshide" #if(!$hideemptyfiles ||"$!hideemptyfiles"=="1")checked#end/&gt;&lt;/span&gt;&lt;/div&gt;
      &lt;div id="filelist"&gt;
      #if($doc.getObject('XWiki.XWikiSkins'))
        #skinFilesList($sc $doc, $file, false, false)
      #else
        #sxFilesList($sc $doc, $file, false, false)
      #end
      &lt;/div&gt;
      &lt;div id="filesfooter"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="footer"  style="height:18px;"&gt;
      &lt;div id="prompt" style="display:none; height:18px;"&gt;&lt;img id="promptimg" src="images/icn_command.png" alt="&gt;" &gt;&lt;/div&gt;
      &lt;div id="commandline" style="height:18px;"&gt;&lt;input id="command" style="display:none;"&gt;&lt;/div&gt;
      &lt;div id="message" style="display:none;"&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
    #end
  #else
$response.sendRedirect("$doc.getURL('view','warning=cannotedit')")
  #end
#else
 ##
 ## = Main = (view mode)
 ##
#if($xwiki.getDocument("XWiki.SkinEditor").document) ## Check we can execute the programming right.
#includeMacros("XWiki.SkinEditorMacros")
#set($code = "{" + "code}") ## Trick to expand a velocity variable inside the code block
#if("$!request.warning" == "cannotedit")
 #warning("You are not allowed to edit this document.")
#end
#if("$!request.info" == "activated")
 #info("The Skin Editor has been successfully activated on this wiki. Thanks!")
#end
&lt;div id="header"&gt;&lt;/div&gt;

1.1 $doc.name

$xwiki.jsx.use("XWiki.SkinEditor")
$xwiki.ssx.use("XWiki.SkinEditor")

&lt;div id="skinfilelist"&gt;
&lt;div style="float: left; width: 33%;"&gt;
#if($doc.getObject("XWiki.XWikiSkins"))
#skinFilesList($sc, $doc, "", true, true)
#else
#sxFilesList($sc, $doc, "", true, true)
#end
&lt;/div&gt;
#if($codeContainerFile &amp;&amp; $codeContainerContent) ## Check that not all files are empty
&lt;div id="codecontainer" style="float: left; width: 66%;"&gt;
 &lt;div style="padding-left:20px;"&gt;
  &lt;div id="codecontainerfile"&gt;&lt;tt&gt;$codeContainerFile&lt;/tt&gt;&lt;/div&gt;
  &lt;div id="codecontainercontent"&gt;
  $code
  $codeContainerContent
  $code
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
#end
&lt;div style="clear: both; margin-bottom: 40px;"&gt;&lt;/div&gt;
&lt;/div&gt;
 #else
  ##
  ## Skin Editor not saved with programming right.
  ##
  #set($documentName = "XWiki.SkinEditor")
   #set($warningText = "The document *${documentName}* needs to be saved with by a user with Programming Access Level for the Skin Editor to be available.")
   #if($context.hasAccessLevel("programming", $documentName))
    #set($saveURL = $xwiki.getURL("${documentName}",'save',"xredirect=${doc.getURL('view')}?info=activated"))
    #set($warningText = "${warningText} You ($xwiki.getUserName($context.user, false)) have the programming Access Level. &lt;a href=${saveURL}&gt;Click this link to save $documentName&lt;/a&gt; and activate the Skin Editor.")
   #else
    #set($warningText = "${warningText} You ($xwiki.getUserName($context.user, false)) do not have the Programming Access Level. Contact your administrator to activate the Skin Editor on this wiki.")
   #end
   #warning("${warningText}")
 #end
#end</content>
</xwikidoc>
